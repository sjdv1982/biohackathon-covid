%run -i init-project.py
await load()
await ctx.computation()
ctx.reduce_protein._get_htf()
ctx.reduce_protein.code.value
ctx.create_protein_mapping = Transformer()
tf  = ctx.create_protein_mapping
tf.code = "grep ATOM protein | grep ' CA ' | awk '{print substr($0,23,4), NR}' > RESULT"
tf.protein = ctx.protein
await ctx.translation()
await ctx.translation(force=True)
ctx.create_protein_mapping.language = "bash"
await ctx.translation(force=True)
ctx.protein_mapping = tf
ctx.protein_mapping.celltype = "text"
await ctx.translation()
ctx.protein_mapping.value
print(ctx.protein_mapping.value)
ctx.create_trinucleotide__mapping = Transformer()
tf = ctx.create_trinucleotide__mapping
tf.language = "bash"
await ctx.translation()
tf.trinucleotide = ctx.trinucleotide
tf.code = "grep ' P ' trinucleotide | awk '{print substr($0,23,4), NR}' > RESULT"
await ctx.translation()
ctx.trinucleotide_mapping = tf
await ctx.translation()
ctx.trinucleotide_mapping.value
ctx.trinucleotide_mapping.celltype = "text"
await ctx.translation()
ctx.trinucleotide_mapping.value
print(ctx.trinucleotide_mapping.value)
ctx.score.code
ctx.score.code.value
score.protein_mapping = ctx.protein_mapping
ctx.score.protein_mapping = ctx.protein_mapping
ctx.score.trinucleotide_mapping = ctx.trinucleotide_mapping
await ctx.translation()
ctx.score.result.value
ctx.protein_active_residues = Cell("text")
ctx.protein_active_residues.mount("protein-active-residues.list")
await ctx.translation()
ctx.protein_active_residues.value
print(ctx.protein_active_residues.value)
ctx.score.protein_active_residues = ctx.protein_active_residues
await ctx.translation()
await ctx.translation()
print(ctx.score.value)
print(ctx.score)
print(ctx.score.result.value)
ctx.trinucleotide_pasive_residues = Cell("text")
ctx.trinucleotide_pasive_residues.mount("trinucleotide-passive-residues.list")
await ctx.translation()
del ctx.trinucleotide_pasive_residues
del ctx.trinucleotide_passive_residues = Cell("text")
ctx.trinucleotide_passive_residues = Cell("text")
await ctx.translation()
save()
ctx.trinucleotide_passive_residues.mount("trinucleotide-passive-residues.list")
await ctx.translation()
ctx.trinucleotide_passive_residues.set("")
ctx.score.trinucleotide_passive_residues = ctx.trinucleotide_passive_residues
await ctx.translation()
ctx.score.result.value
ctx.score.result.value
ctx.test = ctx.score.result
ctx.test.celltype = "text"
await ctx.translation()
await ctx.test.mount("test.txt")
ctx.test.mount("test.txt")
await ctx.test.mount("test.txt")
await ctx.translation()
await ctx.test.mount("test.txt", "w")
ctx.test.mount("test.txt", "w")
await ctx.translation()
ctx.score.result.value
ctx.score.result.value
ctx.score.result.value
ctx.score.result.value
ctx.score.result.value
ctx.dock.protein_mapping = ctx.protein_mapping
del ctx.dock.protein_mapping
ctx.dock.pins.protein_mapping = None
ctx.gen_restraints = Transformer()
tf = ctx.gen_restraints
tf.protein = ctx.protein
tf.protein_mapping = ctx.protein_mapping
tf.language = "bash"
await ctx.translation()
tf.docker_image = "rpbs/attract"
tf.trinucleotide = ctx.trinucleotide
tf.trinucleotide_mapping = ctx.trinucleotide_mapping
tf
await ctx.translation()
tf.code.mount("gen_restraints.sh")
await ctx.translation()
ctx.code.set("")
!touch gen-restraints.sh
tf.code.mount("gen-restraints.sh")
await ctx.translation()
ctx.restraints = ctx.gen_restraints
del ctx.test
ctx.restraints.celltype = "text"
await ctx.translation()
tf.language
tf.language = "docker"
await ctx.translation()
tf.docker_options = {}
await ctx.translation()
tf.protein_active_residues = ctx.protein_active_residues
tf.trinucleotide_passive_residues = ctx.trinucleotide_passive_residues
await ctx.translation()
ctx.trinucleotide.value
print(ctx.trinucleotide.value)
tf.trinucleotide_mapping = ctx.trinucleotide_mapping
tf.trinucleotide = ctx.trinucleotide
await ctx.translation()
tf.inp.value
tf.trinucleotide = ctx.trinucleotide_reduced_trans
tf.protein = ctx.protein_reduced
await ctx.translation()
ctx.restraints.mount("restraints.rest", "w")
await ctx.translation()
ctx.restraints.value
await ctx.translation(force=True)
tf = ctx.score
tf.pins.protein_active_residues = None
tf.pins.protein_mapping = None
tf.pins.trinucleotide_mapping = None
tf.pins.trinucleotide_passive_residues = None
await ctx.translation()
tf.restraints = ctx.restraints
await ctx.translation()
ctx.score.result.value
print(ctx.dock.status)
print(ctx.dock.exception)
ctx.dock.restraints = ctx.restraints
await ctx.translation()
print(ctx.dock.result)
print(ctx.dock.result.value)
%run -i init-project.py
await load()
await ctx.computation()
from ipywidgets import FloatSlider
x = FloatSlider(description="RNA X", min=-200, max=200, value=0)
x
y = FloatSlider(description="RNA Y", min=-200, max=200, value=0)
y
z = FloatSlider(description="RNA Z", min=-200, max=200, value=0)
z
ctx.trinucl_offset_x.traitlet().link(x) 
ctx.trinucl_offset_y.traitlet().link(y) 
ctx.trinucl_offset_z.traitlet().link(z)
ctx.scored2.output()
ctx.docked2.output()
ctx.protein.output()
ctx.trinucleotide.output()
ctx.trinucleotide_centered.output()
print(ctx.dock.result.value)
print(ctx.dock.result.value)
print(ctx.dock.exception)
await ctx.translation()
save()
await ctx.translation()
print(ctx.dock.exception)
ctx.dock.restraints = ctx.restraints
%history -f HISTORY
